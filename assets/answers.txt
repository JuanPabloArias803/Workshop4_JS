Seccion 1.

    ejercicio1.
        
        * Según el código, ¿El acceso a cada variable es posible?
            True) Correcto!, el programa logra acceder a cada una de las variables ya que: 
                - "blockVariable" se usa dentro del bloque if donde fue definida.
                - "functionVariable" se usa dentro de la función donde fue definida.
                - "globalVariable" puede ser accedida desde cualquier lugar del código.
            False) Incorrecto... el programa logra acceder a cada una de las variables ya que: 
                - "blockVariable" se usa dentro del bloque if donde fue definida.
                - "functionVariable" se usa dentro de la función donde fue definida.
                - "globalVariable" puede ser accedida desde cualquier lugar del código.
        
        * ¿Se podría acceder a todas las variables desde cualquier parte del código?
            True) Incorrecto... Recuerda que:
                - Las variables globales (globalVariable) son las únicas que pueden ser 
                accedidas desde cualquier lugar del código.
                - Las variables locales (functionVariable), declaradas dentro de funciones, 
                solamente pueden ser accedidas desde dentro de la función donde fueron
                declaradas.
                - Las variables de bloque (blockVariable), declaradas dentro de un bloque de
                código {}, solamente pueden ser accedidas desde dentro del bloque donde se
                definieron.
            False) Correcto! La tienes clara, recuerda que:
                - Las variables globales (globalVariable) son las únicas que pueden ser 
                accedidas desde cualquier lugar del código.
                - Las variables locales (functionVariable), declaradas dentro de funciones, 
                solamente pueden ser accedidas desde dentro de la función donde fueron
                declaradas.
                - Las variables de bloque (blockVariable), declaradas dentro de un bloque de
                código {}, solamente pueden ser accedidas desde dentro del bloque donde se
                definieron.

    ejercicio 2.

        *3 ¿La función console.log("Valor de a:",a) retornará "Valor de a:1"?
            True) Incorrecto... Debido al hoisting, las variables declaradas con la palabra
                reservada var se "elevan" y son inicializadas con "undefined". Al accederla
                antes de su declaración el resultado es "Valor de a: undefined".
            False) Correcto! Debido al hoisting, las variables declaradas con la palabra
                reservada "var" y llamadas antes de su declaración son retornadas como
                "undefined". El resultado es "Valor de a:undefined".

        *4 ¿La función console.log("Valor de b:",b) retornará "Valor de b:2"?
            True)Incorrecto... Debido al hoisting, las variables declaradas con la palabra 
                reservada "let" también se "elevan" pero no son inicializadas sino que se 
                mantienen en la temporal dead zone hasta su declaración. Al accederla antes
                de su declaración el resultado es un error provocado por la temporal dead zone.
            False) Correcto! Debido al hoisting, las variables declaradas con la palabra 
                reservada "let" también se "elevan" pero no son inicializadas sino que se 
                mantienen en la temporal dead zone hasta su declaración. Al accederla antes
                de su declaración el resultado es un error provocado por la temporal dead zone.

        *5 ¿La función console.log("Valor de c:",c) retornará un error?
            True)Correcto! Al igual que las variables declaradas con la palabra reservada "let",
                las constantes declaradas con la palabra reservada const se "elevan" por el
                hoisting pero se mantienen en la temporal dead zone hasta su declaración,
                por lo que retorna un error si es accedida antes de su declaración.
            False) Incorrecto... Al igual que las variables declaradas con la palabra reservada "let",
                las constantes declaradas con la palabra reservada const se "elevan" por el
                hoisting pero se mantienen en la temporal dead zone hasta su declaración,
                por lo que retorna un error si es accedida antes de su declaración.

        *6 ¿La función console.log("Resultado de funcionDeclarada:",funcionDeclarada()) 
            retornará un error?
            True)Incorrecto... Las funciones declaradas son aquellas que inician con la palabra
                reservada "function" seguido del nombre que se le dará. Estás funciones son
                "elevadas" por el hoisting y pueden ser ejecutadas antes de su declaración. En
                este caso el console.log retornará "Resultado de funcionDeclarada:
                Función declarada ha sido llamada."
            False)Correcto! Las funciones declaradas son aquellas que inician con la palabra
                reservada "function" seguido del nombre que se le dará. Estás funciones son
                "elevadas" por el hoisting y pueden ser ejecutadas antes de su declaración. En
                este caso el console.log retornará "Resultado de funcionDeclarada:
                Función declarada ha sido llamada."

        *7 ¿La función console.log("Resultado de funcionExpresada:",funcionExpresada())
            retornará un error?
            True)Correcto! Las funciones expresadas son aquellas que se almacenan dentro de la
                palabra reservada "const". Al guardarse dentro de un const el hoisting las 
                "eleva" y las coloca en la temporal dead zone por lo que al intentar ejecutarlas 
                antes de su definición retornarán un error.
            False)Incorrecto... Las funciones expresadas son aquellas que se almacenan dentro de la
                palabra reservada "const". Al guardarse dentro de un const el hoisting las 
                "eleva" y las coloca en la temporal dead zone por lo que al intentar ejecutarlas 
                antes de su definición retornarán un error.

Sección 2.

    ejercicio 3

        *8 Según el código, ¿La salida en consola de todas las ejecuciones del programa programa sería:?
            1)Incorrecto... Aunque el closure permite a la función sumadorChild acceder siempre a la variable num de la función padre,
                al instanciar dos ejecuciones diferentes del mismo padre se crean dos contextos de ejecución distintos, lo que hace
                que en cada uno la variable num funcione de forma independiente.
            2)Correcto! Aunque el closure permite a la función sumadorChild acceder siempre a la variable num de la función padre,
                al instanciar dos ejecuciones diferentes del mismo padre se crean dos contextos de ejecución distintos, lo que hace
                que en cada uno la variable num funcione de forma independiente.

    ejercicio 4

        *9 Según el código, ¿Si defino la constante flag en 'true'?
            1.'La consola mostrará: 'Promesa fallida'
            2.'¡Promesa cumplida y callback ejecutado!'
            1)Correcto! Observa como en el operador terciario se define que la promesa retorne su valor resolve, se cumpla  y ejecute el callback 
            cuando la constante flag sea falsy (!flag).
            2)Incorrecto... Observa como en el operador terciario se define que la promesa retorne su valor resolve, se cumpla  y ejecute el callback 
            cuando la constante flag sea falsy (!flag).

    ejercicio 5

        *10 Según el código, ¿El orden en que la consola muestra las ejecuciones será?:
            1)Correcto! Recuerda que:
                - Todo el código síncrono se ejecuta inmediatamente, por eso las funciones console.log() fuera de los setTimeOut son mostradas primero.
                - El código asíncrono se divide en micro y macro tareas. Las funciones setTimeOut son consideradas macrotareas, por eso se envían a 
                    la cola de tareas y son ejecutadas por orden de entrada una vez finaliza la ejecución de todo el código síncrono.
            2)Incorrecto... Recuerda que:
                - Todo el código síncrono se ejecuta inmediatamente, por eso las funciones console.log() fuera de los setTimeOut son mostradas primero.
                - El código asíncrono se divide en micro y macro tareas. Las funciones setTimeOut son consideradas macrotareas, por eso se envían a 
                    la cola de tareas y son ejecutadas por orden de entrada una vez finaliza la ejecución de todo el código síncrono.

        *11 Según el código, ¿El orden en que la consola muestra las ejecuciones será?:
            1) Incorrecto... Recuerda que:
                - Todo el código síncrono se ejecuta en primer lugar, las funciones console.log() son las primeras en ser ejecutadas.
                - Las macrotareas como los setTimeout entran en la cola de macrotareas para esperar a ser ejecutadas en orden de entrada.
                - Las promesas son consideradas microtareas, las microtareas entran en una cola aparte de microtareas. Está cola de microtareas se
                    ejecuta tambien en orden de entrada pero antes de la cola de macrotareas.
            2) Correcto! Recuerda que:
                - Todo el código síncrono se ejecuta en primer lugar, las funciones console.log() son las primeras en ser ejecutadas.
                - Las macrotareas como los setTimeout entran en la cola de macrotareas para esperar a ser ejecutadas en orden de entrada.
                - Las promesas son consideradas microtareas, las microtareas entran en una cola aparte de microtareas. Está cola de microtareas se
                    ejecuta tambien en orden de entrada pero antes de la cola de macrotareas.

        *12 Según el código, ¿El orden en que la consola muestra las ejecuciones será?:
            1) Incorrecto... Debes mejorar tu comprensión del Event Loop para dominar mejor el lenguaje.
            2) Correcto! Tienes una comprensión muy buena del Event Loop, felicitaciones!

